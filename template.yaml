AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "fraudmini: Stage 0.1 minimal API"

Globals:
  Function:
    Runtime: python3.11
    Timeout: 5
    MemorySize: 256
  Api:
    AccessLogSetting:
      DestinationArn: !GetAtt ApiAccessLogGroup.Arn
      Format: '{"requestId":"$context.requestId","status":"$context.status","errorMessage":"$context.error.message"}'

Resources:
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/apigateway/fraudmini-access-logs
      RetentionInDays: 14

  ScoreFunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: fraudmini-score-errors
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref ScoreFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlertsTopic

  AppDataKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS CMK for fraudmini data
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowRootAccount
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: "kms:*"
            Resource: "*"

  AppDataKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/fraudmini-appdata
      TargetKeyId: !Ref AppDataKey

  AlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: fraudmini-alerts

  RawEventsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub fraudmini-raw-events-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration: { Status: Enabled }
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref AppDataKey

  RawEventsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RawEventsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: DenyInsecureTransport
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub arn:aws:s3:::${RawEventsBucket}
              - !Sub arn:aws:s3:::${RawEventsBucket}/*
            Condition:
              Bool: { "aws:SecureTransport": "false" }
          - Sid: EnforceKMSEncryptionOnPut
            Effect: Deny
            Principal: "*"
            Action: "s3:PutObject"
            Resource: !Sub arn:aws:s3:::${RawEventsBucket}/*
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: "aws:kms"
  AppLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub fraudmini-applogs-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration: { Status: Enabled }
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref AppDataKey

  AppLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AppLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: DenyInsecureTransport
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub arn:aws:s3:::${AppLogsBucket}
              - !Sub arn:aws:s3:::${AppLogsBucket}/*
            Condition:
              Bool: { "aws:SecureTransport": "false" }
          - Sid: EnforceKMSEncryptionOnPut
            Effect: Deny
            Principal: "*"
            Action: "s3:PutObject"
            Resource: !Sub arn:aws:s3:::${AppLogsBucket}/*
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: "aws:kms"

  CloudTrailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub fraudmini-cloudtrail-${AWS::AccountId}-${AWS::Region}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub arn:aws:s3:::${CloudTrailBucket}

          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${CloudTrailBucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

          - Sid: DenyInsecureTransport
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub arn:aws:s3:::${CloudTrailBucket}
              - !Sub arn:aws:s3:::${CloudTrailBucket}/*
            Condition:
              Bool:
                aws:SecureTransport: "false"

  Trail:
    Type: AWS::CloudTrail::Trail
    Properties:
      IsLogging: true
      S3BucketName: !Ref CloudTrailBucket
      TrailName: fraudmini-trail
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: false
      EnableLogFileValidation: true

  TransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub fraudmini-transactions-${AWS::AccountId}-${AWS::Region}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: transaction_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: ts
          AttributeType: S
      KeySchema:
        - AttributeName: transaction_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: GSI1_UserTs
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: ts
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref AppDataKey

  DecisionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub fraudmini-decisions-${AWS::AccountId}-${AWS::Region}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: transaction_id
          AttributeType: S
      KeySchema:
        - AttributeName: transaction_id
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref AppDataKey

  RulesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub fraudmini-rules-${AWS::AccountId}-${AWS::Region}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: rule_id
          AttributeType: S
      KeySchema:
        - AttributeName: rule_id
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref AppDataKey

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: fraudmini-userpool
      Schema:
        - Name: email
          Required: true
          Mutable: false
      AutoVerifiedAttributes: [email]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: fraudmini-appclient
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  ScoreFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: fraudmini-score
      CodeUri: src/score/
      Handler: app.handler
      Runtime: python3.11
      Timeout: 5
      MemorySize: 256
      Environment:
        Variables:
          TRANSACTIONS_TABLE: !Ref TransactionsTable
          DECISIONS_TABLE: !Ref DecisionsTable
          RULES_TABLE: !Ref RulesTable
          RAW_BUCKET: !Ref RawEventsBucket
          KMS_KEY_ARN: !GetAtt AppDataKey.Arn
          RULE_VERSION: v1
          ALERTS_TOPIC: !Ref AlertsTopic
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action: dynamodb:PutItem
            Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TransactionsTable}
        - Statement:
            Effect: Allow
            Action: dynamodb:PutItem
            Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DecisionsTable}
        - Statement:
            Effect: Allow
            Action: dynamodb:GetItem
            Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DecisionsTable}
        - Statement:
            Effect: Allow
            Action: dynamodb:Scan
            Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${RulesTable}
        - Statement:
            Effect: Allow
            Action: dynamodb:Query
            Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TransactionsTable}/index/*
        - Statement:
            Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !GetAtt AppDataKey.Arn
        - Statement:
            Effect: Allow
            Action: s3:PutObject
            Resource: !Sub "arn:aws:s3:::${RawEventsBucket}/*"
        - Statement:
            Effect: Allow
            Action: sns:Publish
            Resource: !Ref AlertsTopic

  ScoreFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ScoreFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/score"

  GetDecisionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: fraudmini-get-decision
      CodeUri: src/decision_get/
      Handler: app.handler
      Runtime: python3.11
      Timeout: 5
      MemorySize: 256
      Environment:
        Variables:
          DECISIONS_TABLE: !Ref DecisionsTable
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action: dynamodb:GetItem
            Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DecisionsTable}
        - Statement:
            Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !GetAtt AppDataKey.Arn

  GetDecisionFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GetDecisionFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/decision/*"

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: fraudmini-api
      StageName: prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: "3.0.1"
        info: { title: "fraudmini API", version: "1.0.0" }

        x-amazon-apigateway-request-validators:
          body-only:
            validateRequestBody: true
            validateRequestParameters: false

        components:
          securitySchemes:
            CognitoAuthorizer:
              type: "apiKey"
              name: "Authorization"
              in: "header"
              x-amazon-apigateway-authtype: "cognito_user_pools"
              x-amazon-apigateway-authorizer:
                type: "cognito_user_pools"
                providerARNs:
                  - !GetAtt CognitoUserPool.Arn
          schemas:
            Transaction:
              type: object
              required:
                [
                  transaction_id,
                  user_id,
                  amount,
                  currency,
                  merchant_id,
                  channel,
                  ts,
                  ip,
                  country,
                  device_id,
                  card_bin,
                  card_last4,
                  attempts_last_10min,
                ]
              additionalProperties: false
              properties:
                transaction_id: { type: string, minLength: 4, maxLength: 64 }
                user_id: { type: string, minLength: 1, maxLength: 64 }
                amount: { type: number, minimum: 0 }
                currency: { type: string, pattern: "^[A-Z]{3}$" }
                merchant_id: { type: string, minLength: 1, maxLength: 64 }
                channel:
                  {
                    type: string,
                    enum: [card_not_present, card_present, bank_transfer],
                  }
                ts: { type: string, format: date-time }
                ip: { type: string, format: ipv4 }
                country: { type: string, minLength: 2, maxLength: 2 }
                device_id: { type: string, minLength: 1, maxLength: 64 }
                card_bin: { type: string, pattern: "^[0-9]{6,8}$" }
                card_last4: { type: string, pattern: "^[0-9]{4}$" }
                attempts_last_10min: { type: integer, minimum: 0, maximum: 100 }

        paths:
          /health:
            get:
              summary: "Health check (public)"
              responses:
                "200": { description: "OK" }
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {"statusCode": 200}
                responses:
                  default:
                    statusCode: "200"

          /decision/{transaction_id}:
            get:
              summary: "Fetch a decision by transaction_id"
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: transaction_id
                  in: path
                  required: true
                  schema: { type: string, minLength: 1, maxLength: 64 }
              responses:
                "200": { description: "Decision found" }
                "404": { description: "Not found" }
                "401": { description: "Unauthorized" }
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDecisionFunction.Arn}/invocations

          /score:
            post:
              summary: "Score a transaction "
              x-amazon-apigateway-request-validator: body-only
              security:
                - CognitoAuthorizer: []
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/Transaction"
              responses:
                "200": { description: "OK" }
                "501": { description: "Not implemented" }
                "400": { description: "Bad Request - validation failed" }
                "401": { description: "Unauthorized - missing/invalid JWT" }
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ScoreFunction.Arn}/invocations

Outputs:
  ApiUrl:
    Description: API base URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod
  RawEventsBucketName:
    Description: Raw events bucket
    Value: !Ref RawEventsBucket
  AppLogsBucketName:
    Description: App logs bucket
    Value: !Ref AppLogsBucket
  AppDataKmsKeyArn:
    Description: KMS key ARN
    Value: !GetAtt AppDataKey.Arn
  TransactionsTableName:
    Description: DynamoDB transactions table
    Value: !Ref TransactionsTable
  DecisionsTableName:
    Description: DynamoDB decisions table
    Value: !Ref DecisionsTable
  RulesTableName:
    Description: DynamoDB rules table
    Value: !Ref RulesTable
  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
  CognitoUserPoolArn:
    Description: Cognito User Pool ARN
    Value: !GetAtt CognitoUserPool.Arn
  CognitoAppClientId:
    Description: Cognito App Client ID
    Value: !Ref CognitoUserPoolClient
  AlertsTopicArn:
    Description: SNS alerts topic ARN
    Value: !Ref AlertsTopic
